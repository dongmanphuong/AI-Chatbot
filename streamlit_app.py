import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage
import time
import re # Import for regular expressions to extract product names

# Import necessary components from chatbot_core
# Note: all_products and mock_cart are globally defined in chatbot_core.py
# and we can import them directly to share state.
from chatbot_core import setup_chatbot, load_products_data_from_api, get_response, mock_cart, all_products, create_vector_store

# --- C·∫•u h√¨nh trang Streamlit ---
st.set_page_config(page_title="E-commerce Chatbot", page_icon="üõçÔ∏è", layout="centered") # layout centered for better look
st.title("üõçÔ∏è Chatbot c·ªßa b·∫°n")
st.caption("Tr√≤ chuy·ªán ƒë·ªÉ t√¨m s·∫£n ph·∫©m, th√™m v√†o gi·ªè h√†ng, ho·∫∑c xem t·ªïng ti·ªÅn.")

# --- Kh·ªüi t·∫°o Chatbot (Ch·ªâ ch·∫°y m·ªôt l·∫ßn) ---
if "agent_executor" not in st.session_state:
    st.write("ƒêang kh·ªüi t·∫°o chatbot. Vui l√≤ng ch·ªù...")
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu v√† m√¥ h√¨nh..."):
        try:
            product_documents = load_products_data_from_api() 
            vectorstore = create_vector_store(product_documents)
            _, agent_executor = setup_chatbot(vectorstore)
            st.session_state.agent_executor = agent_executor
            st.success("Chatbot ƒë√£ s·∫µn s√†ng!")
        except Exception as e:
            st.error(f"L·ªói khi kh·ªüi t·∫°o chatbot: {e}")
            st.stop() 

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        AIMessage(content="Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? (V√≠ d·ª•: 'T√¨m ƒëi·ªán tho·∫°i m√†n h√¨nh l·ªõn', 'Th√™m iPhone 15 Pro Max v√†o gi·ªè h√†ng', 'Xem gi·ªè h√†ng', 'T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng')")
    ]

# --- Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán ---
for message in st.session_state.chat_history:
    if isinstance(message, HumanMessage):
        with st.chat_message("user"):
            st.markdown(message.content)
    elif isinstance(message, AIMessage):
        with st.chat_message("assistant"):
            # If the message contains product info, try to display image
            # This is a heuristic and might need refinement for complex answers
            product_found_in_response = False
            for product in all_products:
                if product["name"].lower() in message.content.lower() and product.get("image_url"):
                    st.image(product["image_url"], caption=product["name"], width=150)
                    product_found_in_response = True
                    break
            st.markdown(message.content)


# --- X·ª≠ l√Ω ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng ---
user_query = st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...")

if user_query:
    st.session_state.chat_history.append(HumanMessage(content=user_query))
    with st.chat_message("user"):
        st.markdown(user_query)

    with st.chat_message("assistant"):
        with st.spinner("Bot ƒëang suy nghƒ©..."):
            try:
                response = get_response(user_query, st.session_state.chat_history, st.session_state.agent_executor)
                
                # Check for product image in the response
                # This part is key for displaying images
                product_image_displayed = False
                for product in all_products:
                    # Simple heuristic: if product name is in response AND it has an image URL
                    if product["name"].lower() in response.lower() and product.get("image_url"):
                        st.image(product["image_url"], caption=product["name"], width=150)
                        product_image_displayed = True
                        break # Only display the first matching product image

                st.markdown(response)
                st.session_state.chat_history.append(AIMessage(content=response))
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n: {e}")
                st.session_state.chat_history.append(AIMessage(content="Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."))

# --- Hi·ªÉn th·ªã gi·ªè h√†ng hi·ªán t·∫°i ---
st.sidebar.title("üõí Gi·ªè h√†ng c·ªßa b·∫°n")
if not mock_cart:
    st.sidebar.markdown("_Gi·ªè h√†ng tr·ªëng._")
else:
    total_sidebar = 0
    product_dict_sidebar = {p["name"].lower(): p for p in all_products} # For quick lookup
    for product_name, qty in mock_cart.items():
        st.sidebar.write(f"- **{qty}** x {product_name}")
        product_info = product_dict_sidebar.get(product_name.lower())
        if product_info:
            item_price = product_info["price"]
            subtotal = item_price * qty
            total_sidebar += subtotal
            st.sidebar.caption(f"  _({item_price:,} VNƒê/c√°i)_")
    st.sidebar.markdown(f"---")
    st.sidebar.markdown(f"**T·ªïng c·ªông:** **{total_sidebar:,} VNƒê**")

# You might still see telemetry warnings from chromadb in the console, they are harmless.